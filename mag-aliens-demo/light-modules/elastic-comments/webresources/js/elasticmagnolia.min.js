var queryString, esmClient, searchPageUrl;
function createSectionView(e) {
  var t = document.createElement("div");
  t.classList.add("container");
  var n = createResultSection(e.name);
  return (n.id = e.divId), n.append(t), executeSearch(e, t), n;
}
function buildSearchTemplateBody(e) {
  return {
    id: e.searchTemplate,
    params: {
      fields: e.fields,
      highlights: buildHighlightsObject(e.fields),
      querystring: queryString
    }
  };
}
function executeSearch(e, t) {
  esmClient
    .searchTemplate({ index: e.index, body: buildSearchTemplateBody(e) })
    .then(
      function(n) {
        (totalResults += n.hits.total),
          (showingResults += n.hits.hits.length),
          updateSummaryDiv(totalResults, showingResults),
          $.map(n.hits.hits, function(n) {
            null != n._source[e.resultTitleField] &&
              t.append(
                createSearchResult(
                  n._source[e.resultTitleField],
                  n.highlight,
                  e.pathPrefix + n._source[e.pathIdentifier]
                )
              );
          });
      },
      function(e) {
        console.trace(e.message);
      }
    );
}
function buildHighlightsObject(e) {
  var t = {};
  for (var n of e) t[n] = {};
  return t;
}
$(document).ready(function() {
  console.log("Initializing the Magnolia e-commerce components"),
    initializeElasticMagnolia();
});
var totalResults = 0,
  showingResults = 0;
function initializeElasticMagnolia() {
  if ("undefined" != typeof searchComponents) {
    var e = document.createElement("div");
    for (var t of ((e.id = "summaryDiv"),
    $("#search-results").append(e),
    (queryString = searchComponents.queryString),
    (esmClient = new elasticsearch.Client({
      host: searchComponents.host,
      log: "info"
    })),
    searchComponents.sections))
      t.hasOwnProperty("completed") &&
        !t.completed &&
        (document.getElementById("search-results").append(createSectionView(t)),
        (t.completed = !0));
  }
  $("#search-button").click(function() {
    window.location.href = searchPageUrl + "?q=" + $("#search").val();
  }),
    $("#search").keyup(function(e) {
      e.preventDefault(),
        13 === e.keyCode &&
          (window.location.href = searchPageUrl + "?q=" + $("#search").val());
    });
  $.widget("custom.catautocomplete", $.ui.autocomplete, {
    _renderMenu: function(e, t) {
      var n = this,
        a = "";
      $.each(t, function(t, i) {
        i.category != a &&
          (e.append(
            "<li class='ui-autocomplete-category'>" + i.category + "</li>"
          ),
          (a = i.category)),
          n._renderItemData(e, i);
      });
    }
  }),
    ($.ui.autocomplete.prototype._renderItem = function(e, t) {
      return "label" == t.value
        ? $("<li></li>")
            .addClass("categoryLabel")
            .data("item.autocomplete", t)
            .append('<a style="display:none;"></a>')
            .append(t.label)
            .appendTo(e)
        : $("<li></li>")
            .data("item.autocomplete", t)
            .append('<a href="' + t.path + '">' + t.label + "</a>")
            .appendTo(e);
    }),
    $("#search").catautocomplete({
      source: function(e, t) {
        esmClient
          .search({
            index: "pages-new",
            body: {
              suggest: {
                "title-suggest": {
                  prefix: $("#search").val(),
                  completion: {
                    field: "title.completion",
                    fuzzy: { fuzziness: 2 }
                  }
                }
              }
            }
          })
          .then(
            function(e) {
              t(
                $.map(e.suggest["title-suggest"][0].options, function(e) {
                  if (null != e)
                    return null == e._source.group
                      ? {
                          label: e._source.title,
                          id: e._id,
                          path: e._source.path,
                          category: "Jump To..."
                        }
                      : {
                          label: e._source.title,
                          id: e._id,
                          path: e._source.path,
                          category: e._source.group[0]
                        };
                })
              );
            },
            function(e) {
              console.trace(e.message);
            }
          );
      },
      minLength: 2,
      open: function() {
        $(".ui-menu-item a").removeClass("ui-corner-all");
      }
    });
}
function createResultSection(e) {
  let t = document.createElement("div");
  (t.id = e.replace(" ", "-").toLowerCase() + "results-div"),
    (t.style = "padding-bottom: 10px;");
  let n = document.createElement("h2");
  return n.append(document.createTextNode(e)), t.append(n), t;
}
function createSearchResult(e, t, n) {
  var a = document.createElement("div");
  a.classList.add("col-12");
  var i = document.createElement("div"),
    r = document.createElement("a"),
    o = document.createElement("h3");
  o.append(document.createTextNode(e)),
    r.append(o),
    r.append(document.createElement("br"));
  var c = document.createElement("div");
  (c.style = "display:inline-block"), c.classList.add("searchCiteDiv");
  var s = document.createElement("cite");
  s.append(document.createTextNode(window.location.origin + n)),
    s.classList.add("searchCite"),
    c.append(s),
    r.append(c),
    (r.href = n),
    i.append(r),
    a.append(i);
  var l = document.createElement("div");
  for (var u in t)
    for (var d in t[u]) {
      var p = document.createElement("span");
      p.classList.add("st"),
        (p.innerHTML = stripTags(t[u][d], "em")),
        l.append(p);
    }
  return a.append(l), a;
}
function pageResults(e, t) {}
function updateSummaryDiv(e, t) {
  document.getElementById("summaryDiv").innerHTML =
    "Showing " + t + " of " + e + " Results";
}
function stripTags(e) {
  (e = e.trim()).startsWith("</em> <em>")
    ? (e = e.substring(e.indexOf("</em> <em>") + "</em> <em>".length))
    : e.startsWith("</em>") &&
      (e = e.substring(e.indexOf("</em>") + "</em>".length));
  for (var t = [], n = "", a = 1; a < arguments.length; a++)
    (n = arguments[a].replace(/<|>/g, "").trim()),
      arguments[a].length > 0 && t.push(n, "/" + n);
  if ("string" == typeof e || e instanceof String) {
    if (0 == t.length) return e.replace(/<(\s*\/?)[^>]+>/g, "");
    var i = new RegExp("<(?!(" + t.join("|") + ")s*/?)[^>]+>", "g");
    return e.replace(i, "");
  }
  return "";
}
